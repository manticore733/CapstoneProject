// <auto-generated />
using System;
using APCapstoneProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace APCapstoneProject.Migrations
{
    [DbContext(typeof(BankingAppDbContext))]
    [Migration("20251031085458_migration4")]
    partial class migration4
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("APCapstoneProject.Model.Account", b =>
                {
                    b.Property<int>("AccountId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AccountId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Balance")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BankId")
                        .HasColumnType("int");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AccountId");

                    b.HasIndex("BankId");

                    b.HasIndex("ClientUserId")
                        .IsUnique();

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Bank", b =>
                {
                    b.Property<int>("BankId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BankId"));

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BankId");

                    b.ToTable("Banks");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Beneficiary", b =>
                {
                    b.Property<int>("BeneficiaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BeneficiaryId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BeneficiaryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("BeneficiaryId");

                    b.HasIndex("ClientUserId");

                    b.ToTable("Beneficiaries");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Document", b =>
                {
                    b.Property<int>("DocumentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DocumentId"));

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<string>("DocumentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProofTypeId")
                        .HasColumnType("int");

                    b.HasKey("DocumentId");

                    b.HasIndex("ClientUserId");

                    b.HasIndex("ProofTypeId");

                    b.ToTable("Documents");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<string>("AccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfJoining")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DateOfLeaving")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<decimal>("Salary")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("EmployeeId");

                    b.HasIndex("ClientUserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("APCapstoneProject.Model.ProofType", b =>
                {
                    b.Property<int>("ProofTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("ProofTypeId");

                    b.ToTable("ProofTypes");

                    b.HasData(
                        new
                        {
                            ProofTypeId = 0,
                            Type = 0
                        },
                        new
                        {
                            ProofTypeId = 1,
                            Type = 1
                        },
                        new
                        {
                            ProofTypeId = 2,
                            Type = 2
                        },
                        new
                        {
                            ProofTypeId = 3,
                            Type = 3
                        });
                });

            modelBuilder.Entity("APCapstoneProject.Model.SalaryDisbursementDetail", b =>
                {
                    b.Property<int>("SalaryDisbursementDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryDisbursementDetailId"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DestinationAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("IsSuccessful")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SalaryDisbursementId")
                        .HasColumnType("int");

                    b.HasKey("SalaryDisbursementDetailId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SalaryDisbursementId");

                    b.ToTable("SalaryDisbursementDetails");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Status", b =>
                {
                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("StatusEnum")
                        .HasColumnType("int");

                    b.HasKey("StatusId");

                    b.ToTable("Statuses");

                    b.HasData(
                        new
                        {
                            StatusId = 0,
                            StatusEnum = 0
                        },
                        new
                        {
                            StatusId = 1,
                            StatusEnum = 1
                        },
                        new
                        {
                            StatusId = 2,
                            StatusEnum = 2
                        });
                });

            modelBuilder.Entity("APCapstoneProject.Model.Transaction", b =>
                {
                    b.Property<int>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TransactionId"));

                    b.Property<int>("AccountId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("BankName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("DestinationAccountNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("nvarchar(21)");

                    b.Property<string>("IFSC")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ProcessedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.HasKey("TransactionId");

                    b.HasIndex("AccountId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("Transactions");

                    b.HasDiscriminator().HasValue("Transaction");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("APCapstoneProject.Model.TransactionType", b =>
                {
                    b.Property<int>("TransactionTypeId")
                        .HasColumnType("int");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("TransactionTypeId");

                    b.ToTable("TransactionTypes");

                    b.HasData(
                        new
                        {
                            TransactionTypeId = 0,
                            Type = 0
                        },
                        new
                        {
                            TransactionTypeId = 1,
                            Type = 1
                        });
                });

            modelBuilder.Entity("APCapstoneProject.Model.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("BankId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(13)
                        .HasColumnType("nvarchar(13)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserFullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("BankId");

                    b.HasIndex("UserRoleId");

                    b.ToTable("Users");

                    b.HasDiscriminator().HasValue("User");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("APCapstoneProject.Model.UserRole", b =>
                {
                    b.Property<int>("UserRoleId")
                        .HasColumnType("int");

                    b.Property<int>("Role")
                        .HasColumnType("int");

                    b.HasKey("UserRoleId");

                    b.ToTable("UserRoles");

                    b.HasData(
                        new
                        {
                            UserRoleId = 0,
                            Role = 0
                        },
                        new
                        {
                            UserRoleId = 1,
                            Role = 1
                        },
                        new
                        {
                            UserRoleId = 2,
                            Role = 2
                        });
                });

            modelBuilder.Entity("APCapstoneProject.Model.Payment", b =>
                {
                    b.HasBaseType("APCapstoneProject.Model.Transaction");

                    b.Property<DateTime?>("ApprovedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("BeneficiaryId")
                        .HasColumnType("int");

                    b.Property<int>("SenderClientId")
                        .HasColumnType("int");

                    b.HasIndex("BeneficiaryId");

                    b.HasIndex("SenderClientId");

                    b.HasDiscriminator().HasValue("Payment");
                });

            modelBuilder.Entity("APCapstoneProject.Model.SalaryDisbursement", b =>
                {
                    b.HasBaseType("APCapstoneProject.Model.Transaction");

                    b.Property<bool>("AllEmployees")
                        .HasColumnType("bit");

                    b.Property<int>("ClientUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DisbursementDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("FailedCount")
                        .HasColumnType("int");

                    b.Property<bool?>("IsPartialSuccess")
                        .HasColumnType("bit");

                    b.Property<int>("SuccessfulCount")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalEmployees")
                        .HasColumnType("int");

                    b.HasIndex("ClientUserId");

                    b.HasDiscriminator().HasValue("SalaryDisbursement");
                });

            modelBuilder.Entity("APCapstoneProject.Model.BankUser", b =>
                {
                    b.HasBaseType("APCapstoneProject.Model.User");

                    b.Property<string>("Branch")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("BankUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.ClientUser", b =>
                {
                    b.HasBaseType("APCapstoneProject.Model.User");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("BankUserId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EstablishmentDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.HasIndex("BankUserId");

                    b.HasIndex("StatusId");

                    b.HasDiscriminator().HasValue("ClientUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Account", b =>
                {
                    b.HasOne("APCapstoneProject.Model.Bank", "Bank")
                        .WithMany("Accounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.ClientUser", "ClientUser")
                        .WithOne("Account")
                        .HasForeignKey("APCapstoneProject.Model.Account", "ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Beneficiary", b =>
                {
                    b.HasOne("APCapstoneProject.Model.ClientUser", "ClientUser")
                        .WithMany("Beneficiaries")
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Document", b =>
                {
                    b.HasOne("APCapstoneProject.Model.ClientUser", "ClientUser")
                        .WithMany("Documents")
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.ProofType", "ProofType")
                        .WithMany()
                        .HasForeignKey("ProofTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientUser");

                    b.Navigation("ProofType");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Employee", b =>
                {
                    b.HasOne("APCapstoneProject.Model.ClientUser", "ClientUser")
                        .WithMany("Employees")
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.SalaryDisbursementDetail", b =>
                {
                    b.HasOne("APCapstoneProject.Model.Employee", "Employee")
                        .WithMany("SalaryPayments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.SalaryDisbursement", "SalaryDisbursement")
                        .WithMany("Details")
                        .HasForeignKey("SalaryDisbursementId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("SalaryDisbursement");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Transaction", b =>
                {
                    b.HasOne("APCapstoneProject.Model.Account", "Account")
                        .WithMany("Transactions")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.Status", "TransactionStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.TransactionType", "TransactionType")
                        .WithMany()
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Account");

                    b.Navigation("TransactionStatus");

                    b.Navigation("TransactionType");
                });

            modelBuilder.Entity("APCapstoneProject.Model.User", b =>
                {
                    b.HasOne("APCapstoneProject.Model.Bank", "Bank")
                        .WithMany("Users")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("APCapstoneProject.Model.UserRole", "Role")
                        .WithMany()
                        .HasForeignKey("UserRoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Bank");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Payment", b =>
                {
                    b.HasOne("APCapstoneProject.Model.Beneficiary", "Beneficiary")
                        .WithMany()
                        .HasForeignKey("BeneficiaryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("APCapstoneProject.Model.ClientUser", "SenderClient")
                        .WithMany()
                        .HasForeignKey("SenderClientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Beneficiary");

                    b.Navigation("SenderClient");
                });

            modelBuilder.Entity("APCapstoneProject.Model.SalaryDisbursement", b =>
                {
                    b.HasOne("APCapstoneProject.Model.ClientUser", "ClientUser")
                        .WithMany()
                        .HasForeignKey("ClientUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ClientUser");
                });

            modelBuilder.Entity("APCapstoneProject.Model.ClientUser", b =>
                {
                    b.HasOne("APCapstoneProject.Model.BankUser", "BankUser")
                        .WithMany("Clients")
                        .HasForeignKey("BankUserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("APCapstoneProject.Model.Status", "VerificationStatus")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("BankUser");

                    b.Navigation("VerificationStatus");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Account", b =>
                {
                    b.Navigation("Transactions");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Bank", b =>
                {
                    b.Navigation("Accounts");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("APCapstoneProject.Model.Employee", b =>
                {
                    b.Navigation("SalaryPayments");
                });

            modelBuilder.Entity("APCapstoneProject.Model.SalaryDisbursement", b =>
                {
                    b.Navigation("Details");
                });

            modelBuilder.Entity("APCapstoneProject.Model.BankUser", b =>
                {
                    b.Navigation("Clients");
                });

            modelBuilder.Entity("APCapstoneProject.Model.ClientUser", b =>
                {
                    b.Navigation("Account");

                    b.Navigation("Beneficiaries");

                    b.Navigation("Documents");

                    b.Navigation("Employees");
                });
#pragma warning restore 612, 618
        }
    }
}
